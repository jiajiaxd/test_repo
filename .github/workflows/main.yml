name: Release Manager

on:
  workflow_dispatch:
    inputs:
      version:
        description: '新版本号 (需同时填写changelog/level/significance)'
        required: false
      changelog:
        description: '版本更新日志'
        required: false
      level:
        description: '版本级别 (stable/beta)'
        required: false
      significance:
        description: '版本重要性 (normal/important)'
        required: false
      broadcast:
        description: '广播消息 (留空不修改)'
        required: false

jobs:
  validate-inputs:
    runs-on: ubuntu-latest
    outputs:
      mode: ${{ steps.mode-detection.outputs.mode }}
    steps:
      - name: Input Validation
        id: mode-detection
        run: |
          if [ -n "${{ inputs.version }}" ]; then
            if [ -z "${{ inputs.changelog }}" ] || [ -z "${{ inputs.level }}" ] || [ -z "${{ inputs.significance }}" ]; then
              echo "::error::版本号需要同时提供 changelog/level/significance"
              exit 1
            fi
            mode="version"
          fi
          
          if [ -n "${{ inputs.broadcast }}" ]; then
            mode="${mode:+$mode-}broadcast"
          fi

          [ -z "$mode" ] && { echo "::error::至少需要提供版本信息或广播消息"; exit 1; }
          echo "mode=$mode" >> $GITHUB_OUTPUT

  prepare:
    needs: validate-inputs
    if: contains(needs.validate-inputs.outputs.mode, 'version')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Update Version File
        run: |
          sed -i "s/CURRENT_VERSION = \".*\"/CURRENT_VERSION = \"${{ inputs.version }}\"/" utils/static.py

  build:
    needs: prepare
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest]
    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.12
          cache: 'pip'

      - name: Install Dependencies
        run: |
          pip install pyinstaller
          pip install -r requirements.txt

      - name: Build Executables
        run: |
          python utils/add_build_info.py
          pyinstaller -F Steamauto.py \
            --collect-all apprise \
            --name "Steamauto-${{ matrix.os }}" \
            --add-data "plugins:plugins" \
            --distpath dist/${{ matrix.os }}

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.os }}-bin
          path: dist/${{ matrix.os }}

  publish:
    needs: build
    runs-on: ubuntu-latest
    outputs:
      release-tag: ${{ steps.tag-generation.outputs.tag }}
    steps:
      - name: Generate Timestamp
        id: tag-generation
        run: |
          echo "tag=$(date +'%Y%m%d-%H%M')" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ steps.tag-generation.outputs.tag }}
          name: "Build ${{ steps.tag-generation.outputs.tag }}"
          artifacts: "releases/*"
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          pattern: '*-bin'

  update-metadata:
    needs: 
      - validate-inputs
      - prepare
      - publish
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Process Metadata Updates
        run: |
          # 广播更新分支
          if [[ "${{ needs.validate-inputs.outputs.mode }}" == *broadcast* ]]; then
            jq --arg msg "${{ inputs.broadcast }}" '.broadcast.message = $msg' public.json > tmp.json
            mv tmp.json public.json
          fi

          # 版本更新分支（仅当需要版本更新时执行）
          if [[ "${{ needs.validate-inputs.outputs.mode }}" == *version* ]]; then
            # ... (原有哈希计算和版本信息更新逻辑)
          fi

      - name: Commit Changes
        uses: EndBug/add-and-commit@v9
        with:
          add: |
            public.json
            ${{ contains(needs.validate-inputs.outputs.mode, 'version') && 'utils/static.py' || '' }}
          message: |
            ${{ format('{0}{1}', 
              (inputs.changelog && 'Version: ' + inputs.changelog), 
              (inputs.broadcast && '\nBroadcast: ' + inputs.broadcast)) }}