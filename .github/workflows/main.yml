name: Smart Release Workflow

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Semver version (需要配合changelog/level/significance)'
        required: false
      changelog:
        description: '版本更新日志'
        required: false
      level:
        description: '严重等级 (critical/important/normal)'
        required: false
      significance:
        description: '变更等级 (major/minor/patch)'
        required: false
      broadcast:
        description: '广播消息内容'
        required: false

jobs:
  input_validation:
    name: 🛂 输入验证 & 模式判断
    runs-on: ubuntu-latest
    outputs:
      mode: ${{ steps.mode_detection.outputs.mode }}
      need_build: ${{ steps.mode_detection.outputs.need_build }}
    steps:
      - name: 模式检测
        id: mode_detection
        run: |
          # 模式判断逻辑
          if [ -n "${{ inputs.version }}" ]; then
            [ -z "${{ inputs.changelog }}" ] && echo "❌ 版本发布需要changelog参数" && exit 1
            [ -z "${{ inputs.level }}" ] && echo "❌ 版本发布需要level参数" && exit 1
            [ -z "${{ inputs.significance }}" ] && echo "❌ 版本发布需要significance参数" && exit 1
            
            if [ -n "${{ inputs.broadcast }}" ]; then
              echo "mode=both" >> $GITHUB_OUTPUT
              echo "need_build=true" >> $GITHUB_OUTPUT
            else
              echo "mode=version" >> $GITHUB_OUTPUT
              echo "need_build=true" >> $GITHUB_OUTPUT
            fi
          elif [ -n "${{ inputs.broadcast }}" ]; then
            echo "mode=broadcast" >> $GITHUB_OUTPUT
            echo "need_build=false" >> $GITHUB_OUTPUT
          else
            echo "❌ 无效的输入参数：必须提供版本信息或广播消息" >&2
            exit 1
          fi

  file_modification:
    name: 📝 文件修改
    needs: input_validation
    runs-on: ubuntu-latest
    outputs:
      commit_message: ${{ steps.generate_commit.outputs.msg }}
    steps:
      - uses: actions/checkout@v4
      
      - name: 执行文件修改
        run: |
          python .github/scripts/modify_files.py \
            ${INPUT_VERSION:+--version "$INPUT_VERSION"} \
            ${INPUT_CHANGELOG:+--changelog "$INPUT_CHANGELOG"} \
            ${INPUT_LEVEL:+--level "$INPUT_LEVEL"} \
            ${INPUT_SIGNIFICANCE:+--significance "$INPUT_SIGNIFICANCE"} \
            ${INPUT_BROADCAST:+--broadcast "$INPUT_BROADCAST"}
        env:
          INPUT_VERSION: ${{ inputs.version }}
          INPUT_CHANGELOG: ${{ inputs.changelog }}
          INPUT_LEVEL: ${{ inputs.level }}
          INPUT_SIGNIFICANCE: ${{ inputs.significance }}
          INPUT_BROADCAST: ${{ inputs.broadcast }}

      - name: 生成提交信息
        id: generate_commit
        run: |
          msg_parts=()
          if [ -n "${{ inputs.version }}" ]; then
            msg_parts+=("Release ${{ inputs.version }}: ${{ inputs.changelog }}")
          fi
          if [ -n "${{ inputs.broadcast }}" ]; then
            msg_parts+=("Broadcast update: ${{ inputs.broadcast }}")
          fi
          echo "msg=${msg_parts[*]}" >> $GITHUB_OUTPUT

      - uses: actions/upload-artifact@v3
        with:
          name: modified-files
          path: |
            utils/static.py
            public.json

  build_and_release:
    name: 🏗️ 构建 & 发布
    needs: [input_validation, file_modification]
    if: ${{ needs.input_validation.outputs.need_build == 'true' }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest]
    
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: modified-files
          path: .

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      - name: 构建可执行文件
        run: |
          pip install pyinstaller
          pip install -r requirements.txt
          python utils/add_build_info.py
          pyinstaller -F Steamauto.py \
            --collect-all apprise \
            --name Steamauto-${{ matrix.os }} \
            --add-data "plugins:plugins"

      - uses: actions/upload-artifact@v3
        with:
          name: build-${{ matrix.os }}
          path: dist/

  finalization:
    name: 🚀 最终发布
    needs: 
      - input_validation
      - file_modification
      - build_and_release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: 下载修改后的文件
        uses: actions/download-artifact@v3
        with:
          name: modified-files
          path: .

      - name: 更新下载信息
        if: ${{ needs.input_validation.outputs.need_build == 'true' }}
        run: |
          python .github/scripts/update_downloads.py \
            --version "${{ inputs.version }}" \
            --repo ${{ github.repository }}

      - name: 提交更改
        uses: EndBug/add-and-commit@v9
        with:
          add: utils/static.py public.json
          message: "${{ needs.file_modification.outputs.commit_message }}"
          author_name: "GitHub Actions"
          author_email: "actions@github.com"

      - name: 创建Release
        if: ${{ needs.input_validation.outputs.need_build == 'true' }}
        uses: ncipollo/release-action@v1
        with:
          tag: v${{ inputs.version }}
          token: ${{ secrets.GITHUB_TOKEN }}
          artifacts: releases/*
          body: |
            ## 版本更新 ${{ inputs.version }}
            **变更类型**: ${{ inputs.significance }}
            **严重等级**: ${{ inputs.level }}
            ### 更新日志
            ${{ inputs.changelog }}